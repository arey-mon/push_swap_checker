#include "../../includes/checker.h"
#include "../../libft/includes/libft.h"
#include <stdio.h>

// THAT DIVIDE COSTS LOT LOTS OF OPERATIONS

int		choose_rotation(t_stock *stocka)
{
	int	i;
	int	count_inc;
	int	count_dec;
	int	size;

	i = 0;
	count_inc = 0;
	count_dec = 0;
	size = stocka->size - 1;
	while (size)
	{
		if (stocka->a[i] < stocka->pivot)
		{
			count_inc = i;
			break ;
		}
		i++;
		size--;
	}
	i = stocka->size - 1;
	while (size != (int)stocka->size)
	{
		if (stocka->a[i] < stocka->pivot)
			break ;
		i--;
		size++;
		count_dec++;
	}
	//printf("count_inc is : %d with %d\n", count_inc, stocka->a[count_inc]);
	//printf("count_dec is : %d with %d\n", count_dec, stocka->a[count_dec]);
	return (count_inc < count_dec) ? 1 : 0;
}

void	divide_stock(t_stock *stocka, t_stock *stockb, size_t size_b, t_main *main)
{
// main may be remove from parameters when print_stacks_ps is not needed
	int			size;

	printf("_________________________________DIVIDE_STOCK\n");
	size = stocka->size - 1;
	while (stockb->size != size_b)
	{
		while (size && stockb->size != size_b)
		{
			(choose_rotation(stocka) == 1) ? rotate(stocka, "ra\n") :
				reverse_rotate(stocka, "rra\n");
			if (stocka->a[0] <= stocka->pivot)
			{
				push(stocka, stockb, "pb\n");
				if (stockb->size >= 2 && stockb->a[0] < stockb->a[1])
					swap(stockb, "sb\n");
					print_stacks_ps(main);
				/* MIGHT COST ME LOTS OF OPERATIONS FOR NADA
				if (stockb->size <= 4)
					resolve_less_than_five_b(stockb);
				*/
			}
			size--;
		}
	}
}

int		adjust_pivot(size_t count, size_t size_b, t_stock *stocka)
{
	int	i;

	i = 0;
	while (stocka->a[i])
	{
		if (stocka->a[i] <= stocka->pivot)
			count++;
		i++;
	}
	if (count > size_b)
		stocka->pivot -= 1;
	else if (count < size_b)
		stocka->pivot += 1;
	return (count);
}


int		get_pivot(t_stock *stocka, t_main *main)
{
	size_t		size_b;
	int			i;
	size_t			count;
	(void)main;

	i = 0;
	count = 0;
	size_b = (stocka->size / 2) - 1;
	find_smallest(stocka);
	find_biggest(stocka);
	stocka->pivot = (stocka->big + stocka->small) / 2;
	while (adjust_pivot(count, size_b, stocka) != (int)size_b)
		i++;
printf("ending adjust_pivot with\npivot = %d\nsize_b = %lu\n", stocka->pivot, size_b);
	return (0);
}
